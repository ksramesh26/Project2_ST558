---
title: "test document"
format: html
---

```{r}
library(httr)
library(jsonlite)
library(tidyverse)
```

```{r}
# setting base url
url_base = "https://api.openf1.org/v1/"

## creating api call
get_f1_data = function(endpoint = "car_data", options = list()) {
  #create api url
  url = paste0(url_base, endpoint)
  
  #call api
  f1_data = httr::GET(url, query = options)
  
  #convert to readable data
  f1_data_parsed = fromJSON(rawToChar(f1_data$content))
  
  return(as_tibble(f1_data_parsed))
  
}

# Testing to see if api call works
#test_df = get_f1_data(endpoint = "position", options = list(driver_number = 23 , session_key = "latest"))
#head(test_df)

```


```{r}
## making different endpoints

# car data
get_car_data = function(driver = NULL, sesh_key = NULL, meet_key = NULL, date1 = NULL) {
  get_f1_data("car_data", list(driver_number = driver, session_key = sesh_key, meeting_key = meet_key))
}

# position data
get_position_data = function(driver = NULL, sesh_key = NULL, meet_key = NULL, date1 = NULL) {
  get_f1_data("position", list(driver_number = driver, session_key = sesh_key, meeting_key = meet_key, date = date1))
}

# Lap data
get_lap_data = function(driver = NULL, sesh_key = NULL, meet_key = NULL, date1 = NULL) {
  get_f1_data("laps", list(driver_number = driver, session_key = sesh_key, meeting_key = meet_key, date = date1))
}

# Pit stop data
get_pit_data = function(driver = NULL, sesh_key = NULL, meet_key = NULL, date1 = NULL) {
  get_f1_data("pit", list(driver_number = driver, session_key = sesh_key, meeting_key = meet_key, date = date1))
}

# stint data 
get_stint_data = function(driver = NULL, sesh_key = NULL, meet_key = NULL, date1 = NULL) {
  get_f1_data("stints", list(driver_number = driver, session_key = sesh_key, meeting_key = meet_key, date = date1))
}

# interval data
get_interval_data = function(driver = NULL, sesh_key = NULL, meet_key = NULL, date1 = NULL) {
  get_f1_data("intervals", list(driver_number = driver, session_key = sesh_key, meeting_key = meet_key, date = date1))
}

# driver data
get_driver_data = function(driver = NULL, sesh_key = NULL, meet_key = NULL, date1 = NULL) {
  get_f1_data("drivers", list(driver_number = driver, session_key = sesh_key, meeting_key = meet_key, date = date1))
}

# finishing position
get_finish_data = function(driver = NULL, sesh_key = NULL, meet_key = NULL, date1 = NULL) {
  get_f1_data("session_result", list(driver_number = driver, session_key = sesh_key, meeting_key = meet_key, date = date1))
}


#test to see if modified base call works 
get_position_data(55, NULL, NULL, "2025-07-05")




```


```{r}
# get meeting key based on date
get_meeting_key = function(date2) {
  date1 = get_f1_data("meetings", list(date_start = date2))
  
  
  if(nrow(date1) == 0){
    print("No race found for given date")
    return(NULL)
  } 
  
  
  return(date1$meeting_key)
}

# get session key based on date
get_session_key = function(meet_key) {
  sessions = get_f1_data("sessions", list(meeting_key = meet_key))
  
  
  if(nrow(sessions) == 0){
    print("No sessions found for given date")
    return(NULL)
  } 
  
  
  return(sessions$session_key)
}

```


```{r}
get_meeting_key("2023-06-04")
get_session_key(1211)

```


```{r}

tire_usage_by_session = function(meeting_key1) {
  
  
  df = get_f1_data("stints", list(meeting_key = meeting_key1))
  
  sessions = get_f1_data("sessions", list(meeting_key = meeting_key1)) %>%
    select(session_key, session_name) %>%
    mutate(session_key = as.integer(session_key))
  
  filtered_stints = df %>%
    mutate(session_key = as.integer(session_key))
  
  merged_data = left_join(filtered_stints, sessions, by = "session_key")
  
  #filter and organize data 
  tire_contingency = merged_data %>%
    filter(!is.na(compound), !is.na(session_name)) %>%
    count(compound, session_name) %>%
    pivot_wider(
      names_from = session_name,
      values_from = n,
      values_fill = 0
    ) %>%
    arrange(compound)

  return(tire_contingency)
}

tire_usage_by_session(1219)
```


```{r}
incidents_by_driver_session = function(meeting_key1){
  
  df = get_f1_data("race_control", list(meeting_key = meeting_key1))
  
  sessions = get_f1_data("sessions", list(meeting_key = meeting_key1)) %>%
    select(session_key, session_name) %>%
    mutate(session_key = as.integer(session_key))
  
  filtered_stints = df %>%
    mutate(session_key = as.integer(session_key))
  
  merged_data = left_join(df, sessions, by = "session_key")
  
  incident_contingency = merged_data %>%
    filter(!is.na(driver_number), !is.na(session_name)) %>%
    count(driver_number, session_name) %>%
    pivot_wider(
      names_from = session_name,
      values_from = n,
      values_fill = 0
    ) %>%
    mutate(Total = rowSums(across(is.numeric))) %>%
    arrange(driver_number)
  return(incident_contingency)
  
}
```


```{r}
stints_by_driver_session = function(meeting_key1) {
  
  
  df = get_f1_data("stints", list(meeting_key = meeting_key1))
  
  sessions = get_f1_data("sessions", list(meeting_key = meeting_key1)) %>%
    select(session_key, session_name) %>%
    mutate(session_key = as.integer(session_key))
  
  filtered_stints = df %>%
    mutate(session_key = as.integer(session_key))
  
  merged_data = left_join(filtered_stints, sessions, by = "session_key")
  
  #filter and organize data 
  stint_contingency = merged_data %>%
    filter(!is.na(driver_number), !is.na(session_name)) %>%
    mutate(driver_number = as.character(driver_number)) %>%
    count(driver_number, session_name) %>%
    pivot_wider(
      names_from = session_name,
      values_from = n,
      values_fill = 0
    ) %>%
    mutate(Total = rowSums(across(is.numeric))) %>%
    arrange(driver_number)

  return(stint_contingency)
}
stints_by_driver_session(1219)
```


```{r}
stint_length_by_driver = function(meeting_key1 = NULL, sesh_key = NULL) {
  
  
  df = get_f1_data("stints", list(meeting_key = meeting_key1, session_key = sesh_key)) %>%
    mutate(stint_length = lap_end - lap_start)
  
  stint_summary = df %>%
    filter(!is.na(driver_number), !is.na(stint_length)) %>%
    group_by(driver_number) %>%
    summarise(
      avg_stint = mean(stint_length, na.rm = TRUE),
      median_stint = median(stint_length, na.rm = TRUE),
      max_stint = max(stint_length, na.rm = TRUE),
      min_stint = min(stint_length, na.rm = TRUE),
      sd_stint = sd(stint_length, na.rm = TRUE),
      count = n()
    ) %>%
    mutate(driver_number = as.character(driver_number)) %>%
    arrange(desc(avg_stint))
  
  return(stint_summary)
}
stint_length_by_driver(1219)
```

```{r}
stint_length_by_compound = function(meeting_key1 = NULL, sesh_key = NULL) {
  
  ##get stint data
  df = get_f1_data("stints", list(meeting_key = meeting_key1, session_key = sesh_key)) %>%
    mutate(stint_length = lap_end - lap_start)
  
  #create summary table of stint summary statistics
  stint_summary = df %>%
    filter(!is.na(compound), !is.na(stint_length)) %>%
    group_by(compound) %>%
    summarise(
      avg_stint = mean(stint_length, na.rm = TRUE),
      median_stint = median(stint_length, na.rm = TRUE),
      max_stint = max(stint_length, na.rm = TRUE),
      min_stint = min(stint_length, na.rm = TRUE),
      sd_stint = sd(stint_length, na.rm = TRUE),
      count = n()
    ) %>%
    arrange(desc(avg_stint))
  
  return(stint_summary)
}
stint_length_by_compound(1219)
```

```{r}
lap_duration_by_driver = function(meeting_key1 = NULL, sesh_key = NULL) {
  
  ##get lap data
  df = get_f1_data("laps", list(meeting_key = meeting_key1, session_key = sesh_key))
  
  #create summary table of lap duration statistics
  lap_summary = df %>%
    filter(!is.na(driver_number), !is.na(lap_duration)) %>%
    group_by(driver_number) %>%
    summarise(
      avg_lap = mean(lap_duration, na.rm = TRUE),
      median_lap = median(lap_duration, na.rm = TRUE),
      max_lap = max(lap_duration, na.rm = TRUE),
      min_lap = min(lap_duration, na.rm = TRUE),
      sd_lap = sd(lap_duration, na.rm = TRUE),
      count = n()
    ) %>%
    mutate(driver_number = as.character(driver_number)) %>%
    arrange(avg_lap)
  
  return(lap_summary)
}

```

```{r}
lap_duration_by_compound = function(meeting_key1 = NULL, sesh_key = NULL) {
  
  ##get lap data
  laps_df = get_f1_data("laps", list(meeting_key = meeting_key1, session_key = sesh_key))
  
  ## get stint data
  stints_df = get_f1_data("stints", list(meeting_key = meeting_key1, session_key = sesh_key))
  
  ##expand so compoud per lap is available
  stints_expanded = stints_df %>%
    filter(!is.na(lap_start), !is.na(lap_end)) %>%
    mutate(lap_number_in_stint = map2(lap_start, lap_end, seq)) %>%
    unnest(lap_number_in_stint) %>% 
    select(driver_number, lap_number_in_stint, compound)
  
  
  ##join compound info with laps
  laps_with_compound = left_join(
    laps_df,stints_expanded, by = c("driver_number", "lap_number" = "lap_number_in_stint")
    )
  
  
  #create summary table of lap duration statistics by compound
  lap_summary = laps_with_compound %>%
    filter(!is.na(driver_number), !is.na(compound), !is.na(lap_duration)) %>%
    group_by(driver_number, compound) %>%
    summarise(
      avg_lap = mean(lap_duration, na.rm = TRUE),
      median_lap = median(lap_duration, na.rm = TRUE),
      max_lap = max(lap_duration, na.rm = TRUE),
      min_lap = min(lap_duration, na.rm = TRUE),
      sd_lap = sd(lap_duration, na.rm = TRUE),
      count = n()
    ) %>%
    mutate(driver_number = as.character(driver_number)) %>%
    arrange(driver_number, compound)
  
  return(lap_summary)
}

```

```{r}
plot_lap_summary_by_compound = function(meeting_key1 = NULL, sesh_key = NULL) {
  
  ##get lap data
  laps_df = get_f1_data("laps", list(meeting_key = meeting_key1, session_key = sesh_key))
  
  ## get stint data
  stints_df = get_f1_data("stints", list(meeting_key = meeting_key1, session_key = sesh_key))
  
  ##expand so compoud per lap is available
  stints_expanded = stints_df %>%
    filter(!is.na(lap_start), !is.na(lap_end)) %>%
    mutate(lap_number_in_stint = map2(lap_start, lap_end, seq)) %>%
    unnest(lap_number_in_stint) %>% 
    select(driver_number, lap_number_in_stint, compound)
  
  
  ##join compound info with laps
  laps_with_compound = left_join(
    laps_df,stints_expanded, by = c("driver_number", "lap_number" = "lap_number_in_stint")
    )
  
  
  #create summary table of lap duration statistics by compound
  lap_summary = laps_with_compound %>%
    filter(!is.na(compound), !is.na(lap_duration)) %>%
    group_by(compound) %>%
    summarise(
      avg_lap = mean(lap_duration, na.rm = TRUE),
      median_lap = median(lap_duration, na.rm = TRUE),
      max_lap = max(lap_duration, na.rm = TRUE),
      min_lap = min(lap_duration, na.rm = TRUE),
      sd_lap = sd(lap_duration, na.rm = TRUE),
      count = n()
    ) %>%
    arrange(compound)
  
  ggplot(lap_summary, aes(x = compound, y = min_lap, fill = compound)) +
    geom_col(position = "dodge") +
    labs(
      title = "Average Lap Duration by Compound",
      x = "Tire Compound",
      y = "Average Lap Duration (s)"
    ) +
    theme_minimal()
}
```



```{r}
plot_lap_duration_by_lap_number = function(driver_numbers, session_key) {
  
  ## get lap data for the selected session
  laps_df = get_f1_data("laps", list(session_key = session_key))
  
  ## filter for selected drivers
  driver_laps = laps_df %>%
    filter(driver_number %in% driver_numbers, !is.na(lap_number), !is.na(lap_duration)) %>%
    mutate(driver_number = as.character(driver_number))  #coloring
  
  ## create  plot
  
  
  ggplot(driver_laps, 
         aes(x = lap_number,
             y = lap_duration,
             color = driver_number,
             group = driver_number
             )) +
    geom_line(size = 1) +
    geom_point(size = 1) +
    labs(
      title = "Lap Duration by Lap Number",
      x = "Lap Number",
      y = "Lap Duration (seconds)",
      color = "Driver"
    ) +
    theme_minimal()
}


plot_lap_duration_by_lap_number(driver_numbers = c(1, 63), session_key = 9165)


```

```{r}
plot_compound_usage_heatmap = function(meeting_key1 = NULL, sesh_key = NULL) {
  
  ## get lap data
  laps_df = get_f1_data("laps", list(meeting_key = meeting_key1, session_key = sesh_key))
  
  ## get stint data (contains compound info)
  stints_df = get_f1_data("stints", list(meeting_key = meeting_key1, session_key = sesh_key))
  
  ## expand stint laps to assign compound to each lap
  stints_expanded = stints_df %>%
    filter(!is.na(lap_start), !is.na(lap_end)) %>%
    mutate(lap_number_in_stint = purrr::map2(lap_start, lap_end, seq)) %>%
    tidyr::unnest(lap_number_in_stint) %>%
    select(driver_number, lap_number_in_stint, compound)
  
  ## join compound info to lap data
  laps_with_compound = dplyr::left_join(
    laps_df,
    stints_expanded,
    by = c("driver_number", "lap_number" = "lap_number_in_stint")
  )
  
  ##  heatmap data count of laps by driver and compound
  heatmap_data = laps_with_compound %>%
    filter(!is.na(compound)) %>%
    count(driver_number, compound) %>%
    mutate(driver_number = as.character(driver_number))
  
  ## plot heatmap
  ggplot(heatmap_data, aes(x = compound, y = driver_number, fill = n)) +
    geom_tile(color = "white") +
    scale_fill_gradient(low = "white", high = "steelblue") +
    labs(
      title = "Heatmap of Compound Usage by Driver",
      x = "Compound",
      y = "Driver Number",
      fill = "Lap Count"
    ) +
    theme_minimal()
}
plot_compound_usage_heatmap(meeting_key1 = 1219, sesh_key = 9165)
```

```{r}
plot_lap_stddev_all_drivers = function(session_key) {
  
  # Get lap data and clean
  laps_df = get_f1_data("laps", list(session_key = session_key)) %>%
    filter(!is_pit_out_lap, !is.na(lap_duration)) %>%
    mutate(driver_number = as.character(driver_number))
  
  # standard deviation of lap times
  std_summary = laps_df %>%
    group_by(driver_number) %>%
    summarise(
      lap_sd = sd(lap_duration, na.rm = TRUE)
    ) 
  
  # Plot: standard deviation per driver
  ggplot(std_summary, aes(x = reorder(driver_number, -lap_sd), y = lap_sd, fill = driver_number)) +
    geom_bar(stat = "identity") +
    labs(
      title = "Lap Time Standard Deviation by Driver",
      x = "Driver Number",
      y = "Standard Deviation (s)"
    ) +
    theme_minimal() +
    theme(legend.position = "none")
}

plot_lap_stddev_all_drivers(session_key = "latest")


```

```{r}
plot_gap_to_leader = function(driver_numbers, session_key) {

  interval_df = get_f1_data("intervals", list(session_key = session_key))

  if (!all(c("driver_number", "gap_to_leader", "date") %in% names(interval_df))) {
    return(ggplot() + ggtitle("Required columns not found in intervals data"))
  }

  interval_df = interval_df %>%
    filter(!is.na(gap_to_leader), driver_number %in% driver_numbers) %>%
    mutate(
      driver_number = as.character(driver_number),
      gap_to_leader = as.numeric(gsub("s", "", gap_to_leader)),
      time = as.POSIXct(date, format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC")
    ) %>%
    arrange(driver_number, time)

  ggplot(interval_df, aes(x = time, y = gap_to_leader, color = driver_number)) +
    geom_line(size = 1) +
    labs(
      title = "Gap to Leader Over Time",
      x = "Time (UTC)",
      y = "Gap to Leader (seconds)",
      color = "Driver"
    ) +
    theme_minimal()
}

plot_gap_to_leader(c(44, 1, 55), 9947)

```

```{r}
tire_usage_by_session = function(meeting_key1) {
  
  #get stint data
  df = get_f1_data("stints", list(meeting_key = meeting_key1))
  
  #force integer and get sessino names
  sessions = get_f1_data("sessions", list(meeting_key = meeting_key1)) %>%
    select(session_key, session_name) %>%
    mutate(session_key = as.integer(session_key))
  
  #for stint as integer
  filtered_stints <- df %>%
    mutate(session_key = as.integer(session_key))
  
  #merge sets for session name
  merged_data <- left_join(filtered_stints, sessions, by = "session_key")
  
  #filter and organize data 
  tire_contingency = merged_data %>%
    filter(!is.na(compound), !is.na(session_key)) %>%
    count(compound, session_key) %>%
    pivot_wider(
      names_from = session_name,
      values_from = n,
      values_fill = 0
    ) %>%
    arrange(compound)
  
  return(tire_contingency)
}

stint_length_by_driver(1219)

plot_gap_to_leader(c(55, 1), 9947)
```








